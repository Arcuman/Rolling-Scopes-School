/* eslint-disable no-param-reassign */
/* eslint-disable import/extensions */

import * as storage from "./storage.js";
import create from "./utils/create.js";
import language from "./layouts/index.js"; // { en, ru }
import Key from "./Key.js";

const main = create("main", "", [
  create("h1", "title", "Virtual Keyboard"),
  create(
    "p",
    "hint",
    "Use left <kbd>Ctrl</kbd> + <kbd>Alt</kbd> to switch language. Last language saves in localStorage."
  ),
  create(
    "p",
    "hint",
    "Use button 'hide'(on the virtual keyboard) to hide keyboard. And click on text area to show keyboard"
  ),
  create(
    "p",
    "hint",
    "Button 'Sound'(on the virtual keyboard) toggles keyboard sounds on and off. Green button - on, Gray button - off"
  ),
  create(
    "p",
    "hint",
    "Button 'Voice'(on the virtual keyboard) toggles keyboard voice input on/off. Green button - on, Gray button - off.\
	  Wait a bit when language switch "
  ),
]);

export default class Keyboard {
  constructor(rowsOrder) {
    this.rowsOrder = rowsOrder;
    this.keysPressed = {};
    this.isCaps = false;
  }

  init(langCode) {
    this.keyBase = language[langCode];
    this.output = create(
      "textarea",
      "output",
      null,
      main,
      ["placeholder", "Click here to start..."],
      ["rows", 5],
      ["cols", 50],
      ["spellcheck", true],
      ["autocorrect", "on"]
    );
    this.audios = [];
    Object.keys(language).forEach((lang) => {
      this.audios.push([
        `${lang}-letter`,
        create("audio", null, null, main, [
          "src",
          `./assets/sounds/${lang}/letter.mp3`,
        ]),
      ]);
      this.audios.push([
        `${lang}-func`,
        create("audio", null, null, main, [
          "src",
          `./assets/sounds/${lang}/func.mp3`,
        ]),
      ]);
    });
    this.isSoundOn = true;
    this.container = create("div", "keyboard keyboard-hidden", null, main, [
      "language",
      langCode,
    ]);
    this.isHidden = true;
    document.body.prepend(main);
    return this;
  }

  generateLayout() {
    this.keyButtons = [];
    this.rowsOrder.forEach((row, i) => {
      const rowElement = create("div", "keyboard__row", null, this.container, [
        "row",
        i + 1,
      ]);
      rowElement.style.display = "flex";
      row.forEach((code) => {
        const keyObj = this.keyBase.find((key) => key.code === code);
        if (keyObj) {
          const keyButton = new Key(keyObj);
          if (keyButton.code === "Sound") keyButton.div.classList.add("active");
          this.keyButtons.push(keyButton);
          rowElement.appendChild(keyButton.div);
        }
      });
    });
    this.output.onclick = this.getVisibleBoard;
    document.addEventListener("keydown", this.handleEvent);
    document.addEventListener("keyup", this.handleEvent);
    this.container.onmousedown = this.preHandleEvent;
    this.container.onmouseup = this.preHandleEvent;
  }

  getVisibleBoard = (e) => {
    e.stopPropagation();
    this.container.classList.remove("keyboard-hidden");
    this.isHidden = false;
  };
  preHandleEvent = (e) => {
    e.stopPropagation();
    const keyDiv = e.target.closest(".keyboard__key");
    if (!keyDiv) return;
    const {
      dataset: { code },
    } = keyDiv;
    keyDiv.addEventListener("mouseleave", this.resetButtonState);
    this.handleEvent({ code, type: e.type });
  };

  // –§-—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π

  handleEvent = (e) => {
    if (e.stopPropagation) e.stopPropagation();
    if (this.isHidden) return;
    const { code, type } = e;
    const keyObj = this.keyButtons.find((key) => key.code === code);
    if (!keyObj) return;
    this.output.focus();

    // –ù–ê–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò
    if (type.match(/keydown|mousedown/)) {
      //–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–æ–≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
      if (this.isSoundOn) {
        let lang = this.container.dataset.language;
        if (keyObj.isFnKey) {
          let audio = this.audios.find(
            (audioDiv) => audioDiv[0] === `${lang}-func`
          )[1];
          audio.currentTime = 0;
          audio.play();
        } else {
          let audio = this.audios.find(
            (audioDiv) => audioDiv[0] === `${lang}-letter`
          )[1];
          audio.currentTime = 0;
          audio.play();
        }
      }

      if (!type.match(/mouse/)) e.preventDefault();

      if (code.match(/HideButton/)) {
        this.container.classList.add("keyboard-hidden");
        this.output.blur();
        this.isHidden = true;
        return;
      }

      if (code.match(/Control|Alt|Caps|Shift/) && e.repeat) return;

      if (code.match(/Control/)) this.ctrKey = true;

      if (code.match(/Alt/)) this.altKey = true;

      if (code.match(/Lang/)) this.switchLanguage();

      if (code.match(/Control/) && this.altKey) this.switchLanguage();
      if (code.match(/Alt/) && this.ctrKey) this.switchLanguage();

      keyObj.div.classList.add("active");

      // if (code.match(/Shift/)) this.shiftKey = true;
      // if (this.shiftKey) this.switchUpperCase(true);
      if (code.match(/Shift/) && !this.shiftKey) {
        this.shiftKey = true;
        this.switchUpperCase(true);
      } else if (code.match(/Shift/) && this.shiftKey) {
        this.shiftKey = false;
        this.switchUpperCase(false);
        keyObj.div.classList.remove("active");
      }

      if (code.match(/Caps/) && !this.isCaps) {
        this.isCaps = true;
        this.switchUpperCase(true);
      } else if (code.match(/Caps/) && this.isCaps) {
        this.isCaps = false;
        this.switchUpperCase(false);
        keyObj.div.classList.remove("active");
      }

      if (code.match(/Sound/) && !this.isSoundOn) {
        this.isSoundOn = true;
      } else if (code.match(/Sound/) && this.isSoundOn) {
        this.isSoundOn = false;
        keyObj.div.classList.remove("active");
      }
      if (code.match(/Voice/) && !this.isVoiceOn) {
        this.isVoiceOn = true;
        this.speechRecognationStart();
      } else if (code.match(/Voice/) && this.isVoiceOn) {
        this.isVoiceOn = false;
        this.speechRecognationEnd();
        keyObj.div.classList.remove("active");
      }
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Å–∏–º–≤–æ–ª –º—ã –ø–∏—à–µ–º –≤ –∫–æ–Ω—Å–æ–ª—å (—Å–ø–µ—Ü –∏–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π)
      if (!this.isCaps) {
        // –µ—Å–ª–∏ –Ω–µ –∑–∞–∂–∞—Ç –∫–∞–ø—Å, —Å–º–æ—Ç—Ä–∏–º –Ω–µ –∑–∞–∂–∞—Ç –ª–∏ —à–∏—Ñ—Ç
        this.printToOutput(keyObj, this.shiftKey ? keyObj.shift : keyObj.small);
      } else if (this.isCaps) {
        // –µ—Å–ª–∏ –∑–∞–∂–∞—Ç –∫–∞–ø—Å
        if (this.shiftKey) {
          // –∏ –ø—Ä–∏ —ç—Ç–æ–º –∑–∞–∂–∞—Ç —à–∏—Ñ—Ç - —Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–æ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–º –¥–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
          this.printToOutput(
            keyObj,
            keyObj.sub.innerHTML ? keyObj.shift : keyObj.small
          );
        } else {
          // –∏ –ø—Ä–∏ —ç—Ç–æ–º –ù–ï –∑–∞–∂–∞—Ç —à–∏—Ñ—Ç - —Ç–æ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–≤–º–æ–ª–∞ –¥–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
          this.printToOutput(
            keyObj,
            !keyObj.sub.innerHTML ? keyObj.shift : keyObj.small
          );
        }
      }
      this.keysPressed[keyObj.code] = keyObj;
      // –û–¢–ñ–ê–¢–ò–ï –ö–ù–û–ü–ö–ò
    } else if (e.type.match(/keyup|mouseup/)) {
      this.resetPressedButtons(code);
      if (code.match(/Control/)) this.ctrKey = false;
      if (code.match(/Alt/)) this.altKey = false;
      if (
        !code.match(/Caps/) &&
        !code.match(/Shift/) &&
        !code.match(/Sound/) &&
        !code.match(/Voice/)
      )
        keyObj.div.classList.remove("active");
    }
  };

  speechRecognationStart() {
    window.SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition;

    this.recognition = new SpeechRecognition();
    this.recognition.interimResults = true;
    //this.recognition.lang = "en-US";
    //  this.recognition.lang = "ru-RU";
    this.recognition.lang =
      this.container.dataset.language === "ru" ? "ru-RU" : "en-US";
    this.recognition.addEventListener("result", (e) => {
      const transcript = Array.from(e.results)
        .map((result) => result[0])
        .map((result) => result.transcript)
        .join("");

      const poopScript = transcript.replace(/poop|poo|shit|dump/gi, "üí©");

      if (e.results[0].isFinal) {
        this.printToOutputVoice(poopScript);
      }
    });

    this.recognition.addEventListener("end", this.recognition.start);

    this.recognition.start();
  }
  speechRecognationEnd() {
    this.recognition.stop();
    this.recognition.removeEventListener("end", this.recognition.start);
  }

  resetButtonState = ({
    target: {
      dataset: { code },
    },
  }) => {
    if (code.match(/Control/)) this.ctrKey = false;
    if (code.match(/Alt/)) this.altKey = false;
    this.resetPressedButtons(code);
    if (!this.isHidden) this.output.focus();
  };

  resetPressedButtons = (targetCode) => {
    if (!this.keysPressed[targetCode]) return;
    if (
      !targetCode.match(/Caps/) &&
      !targetCode.match(/Shift/) &&
      !targetCode.match(/Sound/) &&
      !targetCode.match(/Voice/)
    )
      this.keysPressed[targetCode].div.classList.remove("active");
    this.keysPressed[targetCode].div.removeEventListener(
      "mouseleave",
      this.resetButtonState
    );
    delete this.keysPressed[targetCode];
  };

  switchUpperCase(isTrue) {
    // –§–ª–∞–≥ - —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å, –º—ã –ø–æ–¥–Ω–∏–º–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –∏–ª–∏ –æ–ø—É—Å–∫–∞–µ–º
    if (isTrue) {
      // –ú—ã –∑–∞–ø–∏—Å—ã–≤–∞–ª–∏ –Ω–∞—à–∏ –∫–Ω–æ–ø–∫–∏ –≤ keyButtons, —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ–º –ª–µ–≥–∫–æ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ –Ω–∏–º
      this.keyButtons.forEach((button) => {
        // –ï—Å–ª–∏ —É –∫–Ω–æ–ø–∫–∏ –µ—Å—Ç—å —Å–ø–µ—Ü—Å–∏–≤–æ–ª - –º—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∏–ª–∏
        if (button.sub) {
          // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –Ω–µ –∫–∞–ø—Å, —Ç–æ–≥–¥–∞ –ø–æ–¥–Ω–∏–º–∞–µ–º —É —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
          if (this.shiftKey) {
            button.sub.classList.add("sub-active");
            button.letter.classList.add("sub-inactive");
          }
        }
        // –ù–µ —Ç—Ä–æ–≥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        // –ò –µ—Å–ª–∏ –∫–∞–ø—Å, –∏ –Ω–µ —à–∏—Ñ—Ç, –∏ –∏–º–µ–Ω–Ω–æ –Ω–∞—à–∞ –∫–Ω–æ–ø–∫–∞ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞
        if (
          !button.isFnKey &&
          this.isCaps &&
          !this.shiftKey &&
          !button.sub.innerHTML
        ) {
          // —Ç–æ–≥–¥–∞ –ø–æ–¥–Ω–∏–º–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ letter
          button.letter.innerHTML = button.shift;
          // –ï—Å–ª–∏ –∫–∞–ø—Å –∏ –∑–∞–∂–∞—Ç —à–∏—Ñ—Ç
        } else if (!button.isFnKey && this.isCaps && this.shiftKey) {
          // —Ç–æ–≥–¥–∞ –æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∏–º–æ–≤–ª–∞ letter
          button.letter.innerHTML = button.small;
          // –∞ –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —à–∏—Ñ—Ç - —Ç–æ–≥–¥–∞ –ø–æ–¥–Ω–∏–º–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä —É –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
          // —Ç–æ–ª—å–∫–æ —É –∫–Ω–æ–ø–æ–∫, –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞ --- —Ç–∞–º —É–∂–µ –≤—ã—à–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –∫–æ–¥ –¥–ª—è –Ω–∏—Ö
        } else if (!button.isFnKey && !button.sub.innerHTML) {
          button.letter.innerHTML = button.shift;
        }
      });
    } else {
      // –æ–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
      this.keyButtons.forEach((button) => {
        // –ù–µ —Ç—Ä–æ–≥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª
        if (button.sub.innerHTML && !button.isFnKey) {
          // —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ
          // –µ—Å–ª–∏ –Ω–µ –∑–∞–∂–∞—Ç –∫–∞–ø—Å –∏ –Ω–µ –Ω–∞–∂–∞—Ç —à–∏—Ñ—Ç
          if (!this.isCaps && !this.shiftKey) {
            button.sub.classList.remove("sub-active");
            button.letter.classList.remove("sub-inactive");
            // —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
            button.letter.innerHTML = button.small;
            //–µ—Å–ª–∏ –Ω–µ –∑–∞–∂–∞—Ç –∫–∞–ø—Å –Ω–æ –∑–∞–∂–∞—Ç —à–∏—Ñ—Ç
          } else if (this.isCaps && !this.shiftKey) {
            button.sub.classList.remove("sub-active");
            button.letter.classList.remove("sub-inactive");
          }
          // –µ—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–∞ (—Å–Ω–æ–≤–∞ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ)
        } else if (!button.isFnKey) {
          // —Ç–æ –µ—Å–ª–∏ –∑–∞–∂–∞—Ç –∫–∞–ø—Å
          if (!this.isCaps && !this.shiftKey) {
            // —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
            button.letter.innerHTML = button.small;
            //–µ—Å–ª–∏ –Ω–µ –∑–∞–∂–∞—Ç –∫–∞–ø—Å –Ω–æ –∑–∞–∂–∞—Ç —à–∏—Ñ—Ç
          } else if (!this.isCaps && this.shiftKey) {
            // –µ—Å–ª–∏ —à–∏—Ñ—Ç –∑–∞–∂–∞—Ç - —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
            button.letter.innerHTML = button.shift;
          } else if (this.isCaps && !this.shiftKey) {
            // –µ—Å–ª–∏ —à–∏—Ñ—Ç –∑–∞–∂–∞—Ç - —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
            button.letter.innerHTML = button.shift;
          }
        }
      });
    }
  }

  switchLanguage = () => {
    const langAbbr = Object.keys(language);
    let langIdx = langAbbr.indexOf(this.container.dataset.language);
    this.keyBase =
      langIdx + 1 < langAbbr.length
        ? language[langAbbr[(langIdx += 1)]]
        : language[langAbbr[(langIdx -= langIdx)]];

    this.container.dataset.language = langAbbr[langIdx];
    storage.set("kbLang", langAbbr[langIdx]);

    if (this.recognition) {
      this.recognition.stop();
      this.recognition.lang =
        this.container.dataset.language === "ru" ? "ru-RU" : "en-US";
    }

    this.keyButtons.forEach((button) => {
      const keyObj = this.keyBase.find((key) => key.code === button.code);
      if (!keyObj) return;
      button.shift = keyObj.shift;
      button.small = keyObj.small;
      if (keyObj.shift && keyObj.shift.match(/[^a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9]/g)) {
        button.sub.innerHTML = keyObj.shift;
      } else {
        button.sub.innerHTML = "";
      }
      button.letter.innerHTML = keyObj.small;
    });
    if (this.isCaps) this.switchUpperCase(true);
  };

  printToOutput(keyObj, symbol) {
    let cursorPos = this.output.selectionStart;
    const left = this.output.value.slice(0, cursorPos);
    const right = this.output.value.slice(cursorPos);
    const textHandlers = {
      Tab: () => {
        this.output.value = `${left}\t${right}`;
        cursorPos += 1;
      },
      ArrowLeft: () => {
        cursorPos = cursorPos - 1 >= 0 ? cursorPos - 1 : 0;
      },
      ArrowRight: () => {
        cursorPos += 1;
      },
      ArrowUp: () => {
        const positionFromLeft = this.output.value
          .slice(0, cursorPos)
          .match(/(\n).*$(?!\1)/g) || [[1]];
        cursorPos -= positionFromLeft[0].length;
      },
      ArrowDown: () => {
        const positionFromLeft = this.output.value
          .slice(cursorPos)
          .match(/^.*(\n).*(?!\1)/) || [[1]];
        cursorPos += positionFromLeft[0].length;
      },
      Enter: () => {
        this.output.value = `${left}\n${right}`;
        cursorPos += 1;
      },
      Delete: () => {
        this.output.value = `${left}${right.slice(1)}`;
      },
      Backspace: () => {
        this.output.value = `${left.slice(0, -1)}${right}`;
        cursorPos -= 1;
      },
      Space: () => {
        this.output.value = `${left} ${right}`;
        cursorPos += 1;
      },
    };
    if (textHandlers[keyObj.code]) textHandlers[keyObj.code]();
    else if (!keyObj.isFnKey) {
      cursorPos += 1;
      this.output.value = `${left}${symbol || ""}${right}`;
    }
    this.output.setSelectionRange(cursorPos, cursorPos);
  }
  printToOutputVoice(word) {
    let cursorPos = this.output.selectionStart;
    const left = this.output.value.slice(0, cursorPos);
    const right = this.output.value.slice(cursorPos);
    cursorPos += word.length + 1;
    this.output.value = `${left}${word + " " || ""}${right}`;
    this.output.setSelectionRange(cursorPos, cursorPos);
  }
}
